/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package engtelecom.poo;

import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        Scanner matrix = new Scanner(System.in);
        char[][] d = new char[9][9];
        //String c = matrix.next();
        for (int i = 0; i < 9; i++) {
            String c = matrix.next();
            for (int j = 0; j < 9; j++) {
                d[i][j] = c.charAt(j);
            }
        }
        matrix.close();

        char c;
        App r = new App();

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (d[i][j] == '*') {
                    if (i == 0) {
                        if (j == 0) {
                            for (int k = 0; k < 2; k++) { 
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 2;
                                ++i;
                            }
                            i = i - 2;
                            
                        } else if (j == 8) {
                            for (int k = 0; k < 2; k++) {
                                --j;
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 1;
                                ++i;
                            }
                            i = i - 2;

                        } else {
                        for (int k = 0; k < 2; k++) {
                            --j;
                            for (int l = 0; l < 3; l++) {
                                c = d[i][j];
                                d[i][j] = r.escreve(c);
                                ++j;
                            }
                            j = j - 2;
                            ++i;
                        }
                        i = i - 2;
                        }

                    } else if (i == 8) {
                        if (j == 0) {
                            --i;
                            for (int k = 0; k < 2; k++) { 
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 2;
                                ++i;
                            }
                            i = i - 1;
                            
                        } else if (j == 8) {
                            --i;
                            for (int k = 0; k < 2; k++) {
                                --j;
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 1;
                                ++i;
                            }
                            i = i - 1;

                        } else {
                            --i;
                            for (int k = 0; k < 2; k++) {
                                --j;
                                for (int l = 0; l < 3; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 2;
                                ++i;
                            }
                            i = i - 1;
                        }
                        
                    } else {
                        if (j == 0) {
                            --i;
                            for (int k = 0; k < 3; k++) {
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 2;
                                ++i;
                            }
                            i = i - 2;

                        } else if (j == 8) {
                            --i;
                            for (int k = 0; k < 3; k++) {
                                --j;
                                for (int l = 0; l < 2; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 1;
                                ++i;
                            }
                            i = i - 2;

                        } else {
                            --i;
                            for (int k = 0; k < 3; k++) {
                                --j;
                                for (int l = 0; l < 3; l++) {
                                    c = d[i][j];
                                    d[i][j] = r.escreve(c);
                                    ++j;
                                }
                                j = j - 2;
                                ++i;
                            }
                            i = i - 2;
                        }
                    }
                    d[i][j] = '*';
                }
            }
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(d[i][j]);
            }
            System.out.println();
        }
    }
    
    public char escreve (char d) {
        if (d == '*') {
            return '*';
        } else if (d == '.') {
            return '1';
        } else {
            int n = d - '0';
            ++n;
            return (char) n;
        }
    }
}